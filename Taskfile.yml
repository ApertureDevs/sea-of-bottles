version: '3'

tasks:

  ########
  # MAIN #
  ########

  install:
    desc: Install Sea of Bottle Project
    cmds:
      - task: frontend-dependencies
      - task: api-dependencies
      - task: api-event-store-create
      - task: api-event-store-migration
      - task: api-event-store-fixture
      - task: api-event-store-create-test
      - task: api-event-store-migration-test
      - task: api-relational-database-create
      - task: api-relational-database-migration
      - task: api-relational-database-fixture
      - task: api-relational-database-create-test
      - task: api-relational-database-migration-test

  check:
    desc: Check and fix sources
    cmds:
      - task: lint
      - task: global-commit-linter-check
      - task: global-yaml-linter-check
      - task: global-markdown-linter-check
      - task: frontend-html-linter-check
      - task: api-static-analysis
      - task: api-layers-check
      - task: test
      - task: api-relational-database-schema-check
      - task: api-transitive-dependencies-check

  serve:
    desc: Start a local development stack
    cmds:
      - docker-compose up -d frontend-webserver
    deps:
      - frontend-dependencies
      - api-dependencies

  test:
    desc: Launch tests suites
    cmds:
      - task: api-event-store-create-test
      - task: api-event-store-migration-test
      - task: api-relational-database-create-test
      - task: api-relational-database-migration-test
      - task: api-unit-test
      - task: api-integration-test
      - task: frontend-unit-test
      - task: frontend-e2e-test

  lint:
    desc: Lint sources
    cmds:
      - task: global-markdown-linter
      - task: api-php-linter
      - task: frontend-sass-linter
      - task: frontend-ts-linter

  update:
    desc: Update dependencies
    cmds:
      - task: api-dependencies-update
      - task: frontend-dependencies-update

  ##########
  # GLOBAL #
  ##########

  global-yaml-linter-check:
    desc: Check linter rules to YAML files
    cmds:
      - docker-compose run --rm yaml-linter yamllint -c .yamllint.yaml .

  global-markdown-linter:
    desc: Apply linter rules to markdown files
    cmds:
      - docker-compose run --rm markdown-linter markdownlint '**/*.md' -c .markdownlint.yaml --ignore api/vendor --ignore api/dist --ignore frontend/node_modules --ignore frontend/dist --fix

  global-markdown-linter-check:
    desc: Check linter rules to markdown files
    cmds:
      - docker-compose run --rm markdown-linter markdownlint '**/*.md' -c .markdownlint.yaml --ignore api/vendor --ignore api/dist --ignore frontend/node_modules --ignore frontend/dist

  global-commit-linter-check:
    desc: Checks if commit messages meet the conventional commit format
    cmds:
      - docker-compose run --rm commit-linter commitlint --from $(git rev-list --max-parents=0 HEAD)

  #######
  # API #
  #######

  api-dependencies:
    desc: Install API dependencies
    cmds:
      - docker-compose run --rm --no-deps api-cli composer install
    sources:
      - api/composer.lock
    generates:
      - api/vendor/**/*
    method: checksum

  api-dependencies-update:
    desc: Update API dependencies
    cmds:
      - docker-compose run --rm --no-deps api-cli composer update

  api-event-store-create:
    desc: Create/Recreate API eventstore
    cmds:
      - docker-compose run --rm api-cli bin/console doctrine:database:drop --force --if-exists --connection=event_store
      - docker-compose run --rm api-cli bin/console doctrine:database:create --connection=event_store
    deps:
      - api-dependencies

  api-relational-database-create:
    desc: Create/Recreate API database
    cmds:
      - docker-compose run --rm api-cli bin/console doctrine:database:drop --force --if-exists --connection=relational_model
      - docker-compose run --rm api-cli bin/console doctrine:database:create --connection=relational_model
    deps:
      - api-dependencies

  api-event-store-create-test:
    desc: Create/Recreate API eventstore for test suites
    cmds:
      - docker-compose run --rm api-cli bin/console doctrine:database:drop --force --if-exists --connection=event_store --env=test
      - docker-compose run --rm api-cli bin/console doctrine:database:create --connection=event_store --env=test
    deps:
      - api-dependencies

  api-relational-database-create-test:
    desc: Create/Recreate API database for test suites
    cmds:
      - docker-compose run --rm api-cli bin/console doctrine:database:drop --force --if-exists --connection=relational_model --env=test
      - docker-compose run --rm api-cli bin/console doctrine:database:create --connection=relational_model --env=test
    deps:
      - api-dependencies

  api-event-store-migration:
    desc: Execute API eventstore migrations
    cmds:
      - docker-compose run --rm api-cli bin/console doctrine:migration:migrate --configuration=src/Infrastructure/Persistence/EventStore/Migration/doctrine_migrations.yaml --no-interaction
    deps:
      - api-dependencies

  api-relational-database-migration:
    desc: Execute API database migrations
    cmds:
      - docker-compose run --rm api-cli bin/console doctrine:migration:migrate --configuration=src/Infrastructure/Persistence/RelationalModel/Migration/doctrine_migrations.yaml --no-interaction
    deps:
      - api-dependencies

  api-event-store-migration-test:
    desc: Execute API eventstore migrations for test suites
    cmds:
      - docker-compose run --rm api-cli bin/console doctrine:migration:migrate --configuration=src/Infrastructure/Persistence/EventStore/Migration/doctrine_migrations.yaml --no-interaction --env=test
    deps:
      - api-dependencies

  api-relational-database-migration-test:
    desc: Execute API database migrations for test suites
    cmds:
      - docker-compose run --rm api-cli bin/console doctrine:migration:migrate --configuration=src/Infrastructure/Persistence/RelationalModel/Migration/doctrine_migrations.yaml --no-interaction --env=test
    deps:
      - api-dependencies

  api-event-store-migration-diff:
    desc: Generate API eventstore migrations
    cmds:
      - docker-compose run --rm api-cli bin/console doctrine:migration:diff --configuration=src/Infrastructure/Persistence/EventStore/Migration/doctrine_migrations.yaml --no-interaction
    deps:
      - api-dependencies

  api-relational-database-migration-diff:
    desc: Generate API database migrations
    cmds:
      - docker-compose run --rm api-cli bin/console doctrine:migration:diff --configuration=src/Infrastructure/Persistence/RelationalModel/Migration/doctrine_migrations.yaml --no-interaction
    deps:
      - api-dependencies

  api-event-store-fixture:
    desc: Generate API eventstore fixtures
    cmds:
      - docker-compose run --rm api-cli bin/console hautelook:fixtures:load --manager=event_store --append --no-interaction
    deps:
      - api-dependencies

  api-relational-database-fixture:
    desc: Generate API database fixtures
    cmds:
      - docker-compose run --rm api-cli bin/console hautelook:fixtures:load --manager=relational_model --append --no-interaction
    deps:
      - api-dependencies

  api-relational-database-schema-check:
    desc: Check if there is a difference between API database and ORM data mapping
    cmds:
      - docker-compose run --rm api-cli bin/console doctrine:schema:validate --env=test
    deps:
      - api-dependencies

  api-php-linter:
    desc: Apply API linter rules to PHP sources
    cmds:
      - docker-compose run --rm --no-deps api-cli vendor/bin/php-cs-fixer fix -v --show-progress=dots
    deps:
      - api-dependencies

  api-php-linter-check:
    desc: Check API linter rules to PHP sources
    cmds:
      - docker-compose run --rm --no-deps api-cli vendor/bin/php-cs-fixer fix -v --show-progress=dots --dry-run
    deps:
      - api-dependencies

  api-static-analysis:
    desc: Check API PHP sources with phpstan
    cmds:
      - docker-compose run --rm --no-deps api-cli vendor/bin/phpstan analyse
    deps:
      - api-dependencies

  api-transitive-dependencies-check:
    desc: Analyse API composer dependencies and verify that no unknown symbols are used in the sources of a package
    cmds:
      - docker-compose run --rm --no-deps api-cli vendor/bin/composer-require-checker check composer.json --config-file=.composer-require-checker.json
    deps:
      - api-dependencies

  api-layers-check:
    desc: Check dependencies between API layers with deptrac
    cmds:
      - docker-compose run --rm --no-deps api-cli vendor/bin/deptrac analyze depfile.yaml
    deps:
      - api-dependencies

  api-dependencies-security-check:
    desc: Check API dependencies known security vulnerabilities
    cmds:
      - docker-compose run --rm --no-deps api-cli symfony security:check

  api-unit-test:
    desc: Execute API unit test suites
    cmds:
      - docker-compose run --rm --no-deps api-cli vendor/bin/phpunit --group unit
    deps:
      - api-dependencies

  api-integration-test:
    desc: Execute API integration test suites
    cmds:
      - docker-compose run --rm --no-deps api-cli vendor/bin/phpunit --group integration
    deps:
      - api-dependencies

  ############
  # FRONTEND #
  ############

  frontend-dependencies:
    desc: Install frontend dependencies
    cmds:
      - docker-compose run --rm --no-deps frontend-cli npm ci
    sources:
      - frontend/package-lock.json
    generates:
      - frontend/node_modules/**/*
    method: checksum

  frontend-dependencies-update:
    desc: Update frontend dependencies
    cmds:
      - docker-compose run --rm --no-deps frontend-cli npm update

  frontend-cypress-binary:
    desc: Install cypress binary
    cmds:
      - docker-compose run --rm --no-deps frontend-cli npx cypress install
    sources:
      - frontend/package-lock.json
    generates:
      - frontend/.cypress/**/*
    deps:
      - frontend-dependencies

  frontend-e2e-test:
    desc: Execute frontend end to end test suites
    cmds:
      - docker-compose run --rm frontend-cli npx ng e2e
    deps:
      - frontend-dependencies
      - frontend-cypress-binary

  frontend-unit-test:
    desc: Execute frontend unit test suites
    cmds:
      - docker-compose run --rm --no-deps frontend-cli npx ng test --code-coverage --watch=false
    deps:
      - frontend-dependencies

  frontend-dependencies-audit:
    desc: Execute frontend NPM security audit
    cmds:
      - docker-compose run --rm --no-deps frontend-cli npm audit --production
    deps:
      - frontend-dependencies

  frontend-dependencies-audit-fix:
    desc: Resolve frontend NPM security vulnerabilities
    cmds:
      - docker-compose run --rm --no-deps frontend-cli npm audit fix
    deps:
      - frontend-dependencies

  frontend-sass-linter:
    desc: Apply frontend linter rules to SASS sources
    cmds:
      - docker-compose run --rm --no-deps frontend-cli npx stylelint 'src/**/*.scss' --fix
    deps:
      - frontend-dependencies

  frontend-sass-linter-check:
    desc: Check frontend linter rules to SASS sources
    cmds:
      - docker-compose run --rm --no-deps frontend-cli npx stylelint 'src/**/*.scss'
    deps:
      - frontend-dependencies

  frontend-ts-linter:
    desc: Apply frontend linter rules to Typescript sources
    cmds:
      - docker-compose run --rm --no-deps frontend-cli npx eslint '{src/**/*.{ts,html},e2e/**/*.ts}' --fix
    deps:
      - frontend-dependencies

  frontend-ts-linter-check:
    desc: Check frontend linter rules to Typescript sources
    cmds:
      - docker-compose run --rm --no-deps frontend-cli npx eslint '{src/**/*.{ts,html},e2e/**/*.ts}'
    deps:
      - frontend-dependencies

  frontend-html-linter-check:
    desc: Check frontend linter rules to HTML sources
    cmds:
      - docker-compose run --rm --no-deps frontend-cli npx htmlhint 'src/**/*.html' -c .htmlhintrc
    deps:
      - frontend-dependencies

  ##############
  # DEPLOYMENT #
  ##############

  frontend-build-docker-image-dev:
    desc: Build frontend Docker dev image
    cmds:
      - docker buildx build --platform linux/amd64 --file docker/infra/frontend-webserver/Dockerfile --build-arg COMMIT_HASH={{ .COMMIT_HASH }} --build-arg APP_ENV=dev --tag eu.gcr.io/aperturedevs/sob-frontend-webserver:dev --output=type=docker .
    vars:
      COMMIT_HASH:
        sh: git rev-parse origin/develop

  frontend-publish-docker-image-dev:
    desc: Publish frontend Docker dev image
    cmds:
      - docker push eu.gcr.io/aperturedevs/sob-frontend-webserver:dev

  frontend-build-docker-image-preprod:
    desc: Build frontend Docker preprod image
    cmds:
      - docker buildx build --platform linux/amd64 --file docker/infra/frontend-webserver/Dockerfile --build-arg COMMIT_HASH={{ .COMMIT_HASH }} --build-arg APP_ENV=preprod --tag eu.gcr.io/aperturedevs/sob-frontend-webserver:preprod --output=type=docker .
    vars:
      COMMIT_HASH:
        sh: git rev-parse origin/develop

  frontend-publish-docker-image-preprod:
    desc: Publish frontend Docker preprod image
    cmds:
      - docker push eu.gcr.io/aperturedevs/sob-frontend-webserver:preprod

  frontend-build-docker-image-prod:
    desc: Build frontend Docker prod image
    cmds:
      - docker buildx build --platform linux/amd64 --file docker/infra/frontend-webserver/Dockerfile --build-arg COMMIT_HASH={{ .COMMIT_HASH }} --build-arg APP_ENV=prod --tag eu.gcr.io/aperturedevs/sob-frontend-webserver:prod --output=type=docker .
    vars:
      COMMIT_HASH:
        sh: git rev-parse origin/main

  frontend-publish-docker-image-prod:
    desc: Publish frontend Docker prod image
    cmds:
      - docker push eu.gcr.io/aperturedevs/sob-frontend-webserver:prod

  api-build-docker-image-dev:
    desc: Build API Docker dev image
    cmds:
      - docker buildx build --platform linux/amd64 --file docker/infra/api-php/Dockerfile --build-arg COMMIT_HASH={{ .COMMIT_HASH }} --build-arg APP_ENV=dev --tag eu.gcr.io/aperturedevs/sob-api-php:dev --output=type=docker .
    vars:
      COMMIT_HASH:
        sh: git rev-parse origin/develop

  api-publish-docker-image-dev:
    desc: Publish API Docker dev image
    cmds:
      - docker push eu.gcr.io/aperturedevs/sob-api-php:dev

  api-build-docker-image-preprod:
    desc: Build API Docker preprod image
    cmds:
      - docker buildx build --platform linux/amd64 --file docker/infra/api-php/Dockerfile --build-arg COMMIT_HASH={{ .COMMIT_HASH }} --build-arg APP_ENV=prod --tag eu.gcr.io/aperturedevs/sob-api-php:preprod --output=type=docker .
    vars:
      COMMIT_HASH:
        sh: git rev-parse origin/develop

  api-publish-docker-image-preprod:
    desc: Publish API Docker preprod image
    cmds:
      - docker push eu.gcr.io/aperturedevs/sob-api-php:preprod

  api-build-docker-image-prod:
    desc: Build API Docker prod image
    cmds:
      - docker buildx build --platform linux/amd64 --file docker/infra/api-php/Dockerfile --build-arg COMMIT_HASH={{ .COMMIT_HASH }} --build-arg APP_ENV=prod --tag eu.gcr.io/aperturedevs/sob-api-php:prod --output=type=docker .
    vars:
      COMMIT_HASH:
        sh: git rev-parse origin/main

  api-publish-docker-image-prod:
    desc: Publish API Docker prod image
    cmds:
      - docker push eu.gcr.io/aperturedevs/sob-api-php:prod
